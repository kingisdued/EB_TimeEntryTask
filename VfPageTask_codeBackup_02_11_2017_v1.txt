/**
*  ================================================================================================
*    Version        Date            Author      Comment
*  ================================================================================================
*     Initial     Oct-25-2017      Amruta K     Created controller for DisplayTimeEntryReport
*                                               VF page.
*/

public with sharing class EB_DisplayTimeEntryReportController {

    public Map<Id,Asset> mapOfIdVsAsset {get;set;}
    public Map<Id, Map<String, Decimal>> assetWithTimeEntryTimeMap {get; set;}
    public List<DisplayWrapper> displayWrapperList {get; set;}
    public Map<Id,Time_Entry__c> mapOfIdVsTimeEntry;
    public List<String> dateWeekWiseList {get; set;}
    public Map<String,Map<String, decimal>> mapAllTotal {get; set;}
    public Map<String, Decimal> assetValueSumMap {get; set;}

    //setter for setting the object Id That is coming as atrribute
    public Id objProjectId{get; set{
        objProjectId = value;
        initializeAll(); // call this function after setting Project Id to call all the methods
    }}

    public EB_DisplayTimeEntryReportController() {
        dateWeekWiseList = new List<String>();
    }

    public void initializeAll(){
        Map<Id,Asset> mapOfIdVsAsset = populatelstAssets(objProjectId);
        assetWithTimeEntryTimeMap = new Map<Id, Map<String, Decimal>>();
        displayWrapperList = new List<DisplayWrapper>();
        mapAllTotal = new Map<String, Map<String, Decimal>>();
        assetValueSumMap = new Map<String, Decimal>();
        timeEntriesCal(mapOfIdVsAsset);
    }

    //This fuction populates the assets related to the particular object
    public Map<Id,Asset> populatelstAssets(Id objProjectId){
        //Creating the map of Id vs Asset
        mapOfIdVsAsset =new Map<Id,Asset>([
            SELECT Id,
                    Name,
                    Project_New__c,
                    Remaining_Hours__c,
                    Budget_Hours__c,
                    Work_Time_Total__c
            FROM Asset
            WHERE Project_New__c =: objProjectId
            ORDER BY Name
        ]);
        return mapOfIdVsAsset;
    }

    //This function calculates all the dates which we need for several weeks and store it in a date list
    public List<Date> dateListCalculate(){
        List<Date> startDateEndDateList = new List<Date>();
        Integer numberOfDays = 21;
        for(Integer i=numberOfDays; i>= 0;){
            Date checkDateOBj = System.today() - i - 7;
            Date weekStart = checkDateOBj.toStartofWeek();
            Date weekEnd = weekStart + 6;
            i=i-7;
            startDateEndDateList.add(weekStart);
            startDateEndDateList.add(weekEnd);
        }
        return startDateEndDateList;
    }

    /**This function searches all the time-entries related to each asset and calculates the sum of those entries and creates a list of wrapper to be displayed**/
    public void timeEntriesCal(Map<Id,Asset> mapOfIdVsAsset){
        //Check is there is no assets related to project
        if(mapOfIdVsAsset.size() == 0){
            displayWrapperList.add(new DisplayWrapper(null, null ,new Map<String, Decimal>()));
            return;
        }
        // calling the dateListCalculate function from here
        List<Date> startDateEndDateList = new List<Date>();
        startDateEndDateList = dateListCalculate();
        Map<String, Decimal> dateVsTimeMap = new Map<String, Decimal>();
        dateWeekWiseList = new List<String>();

        /**Iterating over the list of dates to create week name and storing them in a list to be iterated on page
        Also generating the map of Week Name Vs Work Time's Initial value**/

        for(Integer i = 0; i < startDateEndDateList.size();) {
            String keyStr = startDateEndDateList[i].month() + '/' + startDateEndDateList[i].day();
            // keyStr += startDateEndDateList[i + 1].month() + '/' + startDateEndDateList[i + 1].day();
            dateVsTimeMap.put(keyStr, 0.0);
            dateWeekWiseList.add(keyStr);
            i=i+2;
        }

        //map for sum of all the work time according to each week
        mapAllTotal.put('Total', dateVsTimeMap);

        //map of estimate, used and remaining hours from asset
        assetValueSumMap.put('1Budget_Hours__c', 0.0);
        assetValueSumMap.put('2Work_Time_Total__c', 0.0);
        assetValueSumMap.put('3Remaining_Hours__c', 0.0);

        //calculating the sum of estimate, used and remaining hours from asset and making the map of asset Id Vs Weekly work time map
        for(Id assetId : mapOfIdVsAsset.keySet()) {
            Decimal sumBudgetHours = assetValueSumMap.get('1Budget_Hours__c');
            Decimal sumWorkTimeTotal = assetValueSumMap.get('2Work_Time_Total__c');
            Decimal sumRemainingHours = assetValueSumMap.get('3Remaining_Hours__c');
            Asset assetObj = mapOfIdVsAsset.get(assetId);
            if(assetObj.Budget_Hours__c != null){
                sumBudgetHours += assetObj.Budget_Hours__c;
            }

            if(assetObj.Work_Time_Total__c != null){
                sumWorkTimeTotal += assetObj.Work_Time_Total__c;
            }

            if(assetObj.Remaining_Hours__c != null){
                sumRemainingHours += assetObj.Remaining_Hours__c;
            }

            assetValueSumMap.put('1Budget_Hours__c',sumBudgetHours);
            assetValueSumMap.put('2Work_Time_Total__c',sumWorkTimeTotal);
            assetValueSumMap.put('3Remaining_Hours__c',sumRemainingHours);
            //New instance is need Else the issue of already output is there
            assetWithTimeEntryTimeMap.put(assetId, new Map<String,Decimal>(dateVsTimeMap));
        }

        //fetches the time entry and calculates week wise total
        for(Time_Entry__c timeEntryObj : [
            SELECT Id,
                    Name,
                    Work_Time__c,
                    Work_Date__c,
                    Asset__c
                FROM Time_Entry__c
                WHERE Asset__c IN : mapOfIdVsAsset.keySet()
        ]) {
            if(timeEntryObj.Work_Date__c >= startDateEndDateList[0] && timeEntryObj.Work_Date__c <= startDateEndDateList[1]) {
                String keyStr = startDateEndDateList[0].month() + '/' + startDateEndDateList[0].day();
                // keyStr += startDateEndDateList[1].month() + '/' + startDateEndDateList[1].day();
                Decimal totalWorkTime = assetWithTimeEntryTimeMap.get(timeEntryObj.Asset__c).get(keyStr) + timeEntryObj.Work_Time__c;
                Decimal totalWorkTimemapAllTotal =  mapAllTotal.get('Total').get(keyStr) + timeEntryObj.Work_Time__c;
                assetWithTimeEntryTimeMap.get(timeEntryObj.Asset__c).put(keyStr, totalWorkTime);
                mapAllTotal.get('Total').put(keyStr,totalWorkTimemapAllTotal);
            }

            else if(timeEntryObj.Work_Date__c >= startDateEndDateList[2] && timeEntryObj.Work_Date__c <= startDateEndDateList[3]) {
                String keyStr = startDateEndDateList[2].month() + '/' + startDateEndDateList[2].day();
                // keyStr += startDateEndDateList[3].month() + '/' + startDateEndDateList[3].day();
                Decimal totalWorkTime = assetWithTimeEntryTimeMap.get(timeEntryObj.Asset__c).get(keyStr) + timeEntryObj.Work_Time__c;
                Decimal totalWorkTimemapAllTotal =  mapAllTotal.get('Total').get(keyStr) + timeEntryObj.Work_Time__c;
                assetWithTimeEntryTimeMap.get(timeEntryObj.Asset__c).put(keyStr, totalWorkTime);
                mapAllTotal.get('Total').put(keyStr,totalWorkTimemapAllTotal);
            }

            else if(timeEntryObj.Work_Date__c >= startDateEndDateList[4] && timeEntryObj.Work_Date__c <= startDateEndDateList[5]) {
                String keyStr = startDateEndDateList[4].month() + '/' + startDateEndDateList[4].day();
                // keyStr += startDateEndDateList[5].month() + '/' + startDateEndDateList[5].day();
                Decimal totalWorkTime = assetWithTimeEntryTimeMap.get(timeEntryObj.Asset__c).get(keyStr) + timeEntryObj.Work_Time__c;
                Decimal totalWorkTimemapAllTotal =  mapAllTotal.get('Total').get(keyStr) + timeEntryObj.Work_Time__c;
                assetWithTimeEntryTimeMap.get(timeEntryObj.Asset__c).put(keyStr, totalWorkTime);
                mapAllTotal.get('Total').put(keyStr,totalWorkTimemapAllTotal);
            }

            else if(timeEntryObj.Work_Date__c >= startDateEndDateList[6] && timeEntryObj.Work_Date__c <= startDateEndDateList[7]) {
                String keyStr = startDateEndDateList[6].month() + '/' + startDateEndDateList[6].day();
                // keyStr += startDateEndDateList[7].month() + '/' + startDateEndDateList[7].day();
                Decimal totalWorkTime = assetWithTimeEntryTimeMap.get(timeEntryObj.Asset__c).get(keyStr) + timeEntryObj.Work_Time__c;
                Decimal totalWorkTimemapAllTotal =  mapAllTotal.get('Total').get(keyStr) + timeEntryObj.Work_Time__c;
                assetWithTimeEntryTimeMap.get(timeEntryObj.Asset__c).put(keyStr, totalWorkTime);
                mapAllTotal.get('Total').put(keyStr,totalWorkTimemapAllTotal);
            }
        }

        //Creating the wrapper list to be displayed on page
        for(Id assetId : assetWithTimeEntryTimeMap.keySet()) {
            displayWrapperList.add(new DisplayWrapper(mapOfIdVsAsset.get(assetId).Name, assetId, assetWithTimeEntryTimeMap.get(assetId)));
        }
    }

    //Wrapper to be displayed on page
    public class DisplayWrapper {
        public String assetName {get; set;}
        public Id assetId {get; set;}
        public Map<String, Decimal> weekVsTimeEntriesSumMap {get; set;}
        public DisplayWrapper(String assetName, Id assetId, Map<String, Decimal> weekVsTimeEntriesSumMap) {
            this.assetName = assetName;
            this.assetId = assetId;
            this.weekVsTimeEntriesSumMap = weekVsTimeEntriesSumMap;
        }
    }
}